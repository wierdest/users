openapi: 3.1.0
info:
  title: API genérica de usuários. 
  summary:  
  description: |
    Acesso à api é feito através de um API KEY.
    Persiste o email e a senha do usuário com PostgresSQL.
    Criptografa a senha do usuário. 
    Oferece um endpoint de autenticação.
  termsOfService: https://users.com/terms/
  contact:
    name: API Support
    url: https://www.users.com/support
    email: support@users.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'

servers:
  - url: http://localhost:8080/
    description: The local development API server

paths:
  
  /users:
    get:
      summary: Consulta todos os usuários com paginação
      tags:
        - Pegar USERS
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Retornou a lista de USERS com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDTO'
                  totalElements:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  size:
                    type: integer
                    example: 10
                  number:
                    type: integer
                    example: 1
                  numberOfElements:
                    type: integer
                    example: 10
                  first:
                    type: boolean
                    example: false
        '400':
          $ref: '#/components/responses/IllegalInput'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'

    post:
      summary: Cadastra um usuário no database.
      operationId: cadastrarUsuario
      tags:
        - Cadastrar USER
      description: |
        Cadastra o USER se o email for único no database.
        Criptografa a senha inserida.
        Registra o momento de criação.
      requestBody:
        description: UserLoginDTO contendo o email a ser validado e a senha a ser criptografada
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDTO'
      responses:
        '204':
          description: User cadastrado com sucesso. Retorna um AuthorizationToken
          content:
            application;json:
              schema:
                $ref: '#/components/schemas/AuthorizationToken'
        '400':
          $ref: '#/components/responses/IllegalInput'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'

    delete:
      summary: Deleta um usuário do database
      operationId: deletaUsuario
      tags:
        - Deletar USER
      description: Deleta um usuário do database
      parameters:
          - name: id
            in: path
            description: ID do usuário a ser deletado
            required: true
            schema:
              type: string
      responses:
        '204':
          description: User deletado com sucesso. No content.
        '404':
        $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'
  
  /auth:
    get:
      summary: Autoriza o USER no database a partir da correspondência do email e senha inseridos
      operationId: userAuth
      tags:
        - Conferir USER
      description: |
        Confere se o email inserido existe
        Confere a correspondência entre a senha inserida e a cadastrada
        Retorna um AuthorizationToken 
      requestBody:
          description: UserLoginDTO contendo email e senha do usuário para autenticação
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginDTO'
      responses:
        '200':
          description: Autenticado com sucesso. Retorna um AuthorizationToken.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationToken'
        '400':
          $ref: '#/components/responses/IllegalInput'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/GeneralError'

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: long
          description: a id do usuario no db
        email:
          type: string
          description: o email do usuário
        createdAt:
            type: string
            format: date-time
            description: O registro de criação da usuário.
        accessedAt:
            type: string
            format: date-time
            description: O registro do último acesso do usuário.
    
    UserLoginDTO:
      type: object
      properties:
        email:
          type: string
          description: o email do usuário
        password:
          type: string
          description: A senha que o usuário gostaria de cadastrar
    
    AuthorizationToken:
      type: object
      properties:
        token:
          type: string
          description: O token de autenticação JWT
        expiresAt:
          type: string
          format: date-time
          description: Data e hora de expiração do token
        type:
          type: string
          description: Tipo de token (por exemplo, Bearer)
          example: Bearer

    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  responses:
    IllegalInput:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    GeneralError:
      description: General error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'


